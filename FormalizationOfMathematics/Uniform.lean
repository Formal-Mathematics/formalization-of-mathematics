import Mathlib

/-!

Examples:
- Metric spaces are uniform spaces
- Topological Groups are uniform spaces

Uniformity lets you formulte what it means for two points to be close to eachother with the following axioms:
1. Any point `x` should be close to itself.
2. If `x` is close to `y` then `y` is close to `x`.
3. If `x` is close to `y` and `y` is close to `z` then `x` is close to `z`.

Idea: The notion of "closeness" on `X` should be modeled as a filter on `X √ó X`.
-/

--#check UniformSpace

#check nhds_basis_uniformity

example {Œ± : Type*} (U : UniformSpace.Core Œ±) : UniformSpace Œ± := UniformSpace.ofCore U
example {Œ± : Type*} (U : UniformSpace.Core Œ±) : TopologicalSpace Œ± :=
  (UniformSpace.ofCore U).toTopologicalSpace

open scoped Topology Uniformity

example {Œ± : Type*} [UniformSpace Œ±] (x : Œ±) :
  (ùìù x).HasBasis (Œπ := Set Œ±)
    (fun S => { p | p.fst = x ‚àß p.snd ‚àà S } ‚àà ùì§ Œ±)
    id := by
  sorry

/-!

(Pseudo)Metric Spaces

-/

#check nhds_basis_uniformity

#check PseudoMetricSpace

#check Metric.nhds_basis_ball

example {Œ± : Type*} [PseudoMetricSpace Œ±] (x : Œ±) :
    (ùìù x).HasBasis (Œπ := ‚Ñù) (fun Œµ => 0 < Œµ) (fun Œµ => Metric.ball x Œµ) :=
  Metric.nhds_basis_ball

example {Œ± Œ≤ : Type*} [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] (f : Œ± ‚Üí Œ≤)
    (H : ‚àÄ (x : Œ±) (Œµ : ‚Ñù), 0 < Œµ ‚Üí ‚àÉ (Œ¥ : ‚Ñù), 0 < Œ¥ ‚àß
        ‚àÄ (y : Œ±), dist y x < Œ¥ ‚Üí dist (f y) (f x) < Œµ) :
    Continuous f := by
  rw [continuous_iff_continuousAt]
  intro x
  specialize H x
  change Filter.Tendsto f _ _
  have hx := Metric.nhds_basis_ball (x := x)
  have hfx := Metric.nhds_basis_ball (x := f x)
  rw [hx.tendsto_iff hfx]
  exact H

/-!
Completions
-/

variable (Œ± : Type*) [UniformSpace Œ±]

/-

Intuition: Suppose that `X` is a metric space and `Y` is a complete metric space

Let `f : X ‚Üí Y` be a function satisfying ...

Define `Xhat` = "the space of limits of cauchy sequenecs on `X`"

The map `Œπ : X ‚Üí Xhat` is the function sending `x` to `lim x`.
The map `Xhat ‚Üí Y` is going to be the function
`lim x_n` maps to `lim (f x_n)`.
-/

example : Type _ := UniformSpace.Completion Œ±

noncomputable

example {Œ≤ : Type*} [UniformSpace Œ≤] (f : Œ± ‚Üí Œ≤) :
  UniformSpace.Completion Œ± ‚Üí Œ≤ := UniformSpace.Completion.extension f

example (x : Œ±) : UniformSpace.Completion Œ± := x

example {Œ≤ : Type*} [UniformSpace Œ≤] [SeparatedSpace Œ≤] (f : Œ± ‚Üí Œ≤)
    (hf : UniformContinuous f)
    (x : Œ±) :
    (UniformSpace.Completion.extension f) x = f x :=
  UniformSpace.Completion.extension_coe hf x

example {Œ≤ : Type*} [UniformSpace Œ≤] [T2Space Œ≤] (f g : UniformSpace.Completion Œ± ‚Üí Œ≤)
    (hf : Continuous f) (hg : Continuous g)
    (h : ‚àÄ x : Œ±, f x = g x) : f = g :=
  UniformSpace.Completion.ext hf hg h

example {Œ≤ : Type*} [UniformSpace Œ≤] [CompleteSpace Œ≤] (f : Œ± ‚Üí Œ≤) :
    UniformContinuous (UniformSpace.Completion.extension f) :=
  UniformSpace.Completion.uniformContinuous_extension

-- The relationship between cauchy sequences and cauchy filters
example (Œ± : Type*) [MetricSpace Œ±] (f : ‚Ñï ‚Üí Œ±) : Prop :=
  Cauchy (Filter.atTop.map f)
